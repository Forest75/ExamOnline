# Generated by Django 2.1.3 on 2018-11-07 12:05

import django.contrib.auth.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChoiceProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=200, verbose_name='题目内容')),
                ('level', models.IntegerField(verbose_name='难度系数')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='标签')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='作者')),
                ('option_A', models.CharField(max_length=50, verbose_name='A选项')),
                ('option_B', models.CharField(max_length=50, verbose_name='B选项')),
                ('option_C', models.CharField(max_length=50, verbose_name='C选项')),
                ('option_D', models.CharField(max_length=50, verbose_name='D选项')),
                ('answer', models.CharField(choices=[('option_A', 'A'), ('option_B', 'B'), ('option_C', 'C'), ('option_D', 'D')], max_length=40, verbose_name='参考答案')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否存在')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '选择题',
                'db_table': 'ChoiceProblem',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='FillBlankProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=200, verbose_name='题目内容')),
                ('level', models.IntegerField(verbose_name='难度系数')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='标签')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='作者')),
                ('answer', models.CharField(max_length=200, verbose_name='参考答案')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否存在')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '填空题',
                'db_table': 'FillBlankProblem',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='JudgeProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=100, verbose_name='题目内容')),
                ('level', models.IntegerField(verbose_name='难度系数')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='标签')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='作者')),
                ('answer', models.BooleanField(verbose_name='是否正确')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否存在')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '判断题',
                'db_table': 'JudgeProblem',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='OperateProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=200, verbose_name='题目内容')),
                ('level', models.IntegerField(verbose_name='难度系数')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='标签')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='作者')),
                ('answer', models.TextField(verbose_name='参考答案')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否存在')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '实际操作题',
                'db_table': 'OperateProblem',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='QAProblem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=200, verbose_name='题目内容')),
                ('level', models.IntegerField(verbose_name='难度系数')),
                ('tag', models.CharField(blank=True, max_length=50, null=True, verbose_name='标签')),
                ('author', models.CharField(blank=True, max_length=50, null=True, verbose_name='作者')),
                ('answer', models.TextField(verbose_name='参考答案')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否存在')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name_plural': '问答题',
                'db_table': 'QAProblem',
                'ordering': ['create_time'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uid', models.AutoField(primary_key=True, serialize=False)),
                ('is_teacher', models.BooleanField(verbose_name='是否为老师')),
                ('real_name', models.CharField(max_length=30, verbose_name='姓名')),
                ('username', models.CharField(max_length=30, unique=True, verbose_name='学号')),
                ('class_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='班级')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户',
                'ordering': ['class_name'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
